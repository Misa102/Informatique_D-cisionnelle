-- Supprimer les tables avec cascade des contraintes
DROP TABLE TEMPS CASCADE CONSTRAINTS;
DROP TABLE CLIENT CASCADE CONSTRAINTS;
DROP TABLE VENDEUR CASCADE CONSTRAINTS;
DROP TABLE GEOGRAPHIE CASCADE CONSTRAINTS;
DROP TABLE PRODUIT CASCADE CONSTRAINTS;
DROP TABLE VENTE CASCADE CONSTRAINTS;

-- Créer la table TEMPS
CREATE TABLE TEMPS (
    ID_TEMPS INTEGER NOT NULL,
    JOUR VARCHAR (16) NOT NULL,
    MOIS VARCHAR(16) NOT NULL,
    TRIMESTRE VARCHAR(16) NOT NULL,
    SEMESTRE VARCHAR(16) NOT NULL,
    SAISON VARCHAR(40) NOT NULL
);

CREATE UNIQUE INDEX PK_TEMPS ON TEMPS(ID_TEMPS);

ALTER TABLE TEMPS ADD CONSTRAINT PK_TEMPS PRIMARY KEY (ID_TEMPS);

-- Créer la table CLIENT
CREATE TABLE CLIENT (
    ID_CLIENT INTEGER NOT NULL,
    CODE_CLIENT VARCHAR(50) NOT NULL,
    CONTACT VARCHAR(50) NOT NULL,
    FONCTION VARCHAR(100) NOT NULL
);

CREATE UNIQUE INDEX PK_CLIENT ON CLIENT(ID_CLIENT);

ALTER TABLE CLIENT ADD CONSTRAINT PK_CLIENT PRIMARY KEY (ID_CLIENT);

-- Créer la table VENDEUR
CREATE TABLE VENDEUR (
    ID_VENDEUR INTEGER NOT NULL,
    NOM VARCHAR(50) NOT NULL,
    AGE NUMBER NOT NULL,
    TRANCHEAGE NUMBER NOT NULL,
    SALAIRE FLOAT NOT NULL
);

CREATE UNIQUE INDEX PK_VENDEUR ON VENDEUR(ID_VENDEUR);

ALTER TABLE VENDEUR ADD CONSTRAINT PK_VENDEUR PRIMARY KEY (ID_VENDEUR);

-- Créer la table PRODUIT
CREATE TABLE PRODUIT (
    ID_PRODUIT INTEGER NOT NULL,
    REFERENCE VARCHAR(50) NOT NULL,
    NOM_PRODUIT VARCHAR(100) NOT NULL,
    NOM_CATEGORIE VARCHAR(100) NOT NULL,
    PRIXUNITAIRE FLOAT(100) NOT NULL,
    UNITESENSTOCK NUMBER NOT NULL,
    UNITESCOMANDEES NUMBER NOT NULL
);


CREATE UNIQUE INDEX PK_PRODUIT ON PRODUIT(ID_PRODUIT);

ALTER TABLE PRODUIT ADD CONSTRAINT PK_PRODUIT PRIMARY KEY (ID_PRODUIT);

-- Créer la table GEOGRAPHIE
CREATE TABLE GEOGRAPHIE (
    ID_GEOGRAPHIE INTEGER NOT NULL,
    VILLE VARCHAR(50),
    REGION VARCHAR(100),
    PAYS VARCHAR(100),
    ZONEGEOGRAPHIQUE VARCHAR(100) -- 'Europe', 'Amérique du Nord'
);

CREATE UNIQUE INDEX PK_GEOGRAPHIE ON GEOGRAPHIE(ID_GEOGRAPHIE);

ALTER TABLE GEOGRAPHIE ADD CONSTRAINT PK_GEOGRAPHIE PRIMARY KEY (ID_GEOGRAPHIE);

-- Créer la table VENTE
CREATE TABLE VENTE (
    ID_PERIODE INTEGER NOT NULL,
    ID_CLIENT INTEGER NOT NULL,
    ID_VENDEUR INTEGER NOT NULL,
    ID_PRODUIT INTEGER NOT NULL,
    ID_GEOGRAPHIE INTEGER NOT NULL,
    NOMBRE_DE_VENTES NUMBER,
    CHIFFRE_D_AFFAIRES NUMBER,
    MONTANT FLOAT
);

CREATE UNIQUE INDEX PK_VENTE ON VENTE(ID_PERIODE, ID_CLIENT, ID_VENDEUR, ID_PRODUIT, ID_GEOGRAPHIE);

ALTER TABLE VENTE ADD CONSTRAINT PK_VENTE PRIMARY KEY (ID_PERIODE, ID_CLIENT, ID_VENDEUR, ID_PRODUIT, ID_GEOGRAPHIE);

ALTER TABLE VENTE ADD CONSTRAINT FK_VENTE_TEMPS FOREIGN KEY (ID_PERIODE) REFERENCES TEMPS(ID_TEMPS);

ALTER TABLE VENTE ADD CONSTRAINT FK_VENTE_CLIENT FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID_CLIENT);

ALTER TABLE VENTE ADD CONSTRAINT FK_VENTE_VENDEUR FOREIGN KEY (ID_VENDEUR) REFERENCES VENDEUR(ID_VENDEUR);

ALTER TABLE VENTE ADD CONSTRAINT FK_VENTE_PRODUIT FOREIGN KEY (ID_PRODUIT) REFERENCES PRODUIT(ID_PRODUIT);

ALTER TABLE VENTE ADD CONSTRAINT FK_VENTE_GEOGRAPHIE FOREIGN KEY (ID_GEOGRAPHIE) REFERENCES GEOGRAPHIE(ID_GEOGRAPHIE);



-- CREATION AUTOINCREMENT
DROP SEQUENCE SEQ_CLIENT;
DROP SEQUENCE SEQ_VENDEUR;
DROP SEQUENCE SEQ_PRODUIT;
DROP SEQUENCE SEQ_TEMPS;
DROP SEQUENCE SEQ_GEOGRAPHIE;


-- Créer une séquence pour la table CLIENT
CREATE SEQUENCE SEQ_CLIENT;

-- Créer un déclencheur pour la séquence de la table CLIENT
CREATE OR REPLACE TRIGGER TRIG_SEQ_CLIENT
BEFORE INSERT ON CLIENT FOR EACH ROW
BEGIN
    SELECT SEQ_CLIENT.NEXTVAL INTO :NEW.ID_CLIENT FROM DUAL;
END;
/
-- Créer une séquence pour la table VENDEUR
CREATE SEQUENCE SEQ_VENDEUR;

-- Créer un déclencheur pour la séquence de la table VENDEUR
CREATE OR REPLACE TRIGGER TRIG_SEQ_VENDEUR
BEFORE INSERT ON VENDEUR FOR EACH ROW
BEGIN
    SELECT SEQ_VENDEUR.NEXTVAL INTO :NEW.ID_VENDEUR FROM DUAL;
END;
/
-- Créer une séquence pour la table PRODUIT
CREATE SEQUENCE SEQ_PRODUIT;

-- Créer un déclencheur pour la séquence de la table PRODUIT
CREATE OR REPLACE TRIGGER TRIG_SEQ_PRODUIT
BEFORE INSERT ON PRODUIT FOR EACH ROW
BEGIN
    SELECT SEQ_PRODUIT.NEXTVAL INTO :NEW.ID_PRODUIT FROM DUAL;
END;
/

-- Créer une séquence pour la table TEMPS
CREATE SEQUENCE SEQ_TEMPS;

-- Créer un déclencheur pour la séquence de la table TEMPS
CREATE OR REPLACE TRIGGER TRIG_SEQ_TEMPS
BEFORE INSERT ON TEMPS FOR EACH ROW
BEGIN
    SELECT SEQ_TEMPS.NEXTVAL INTO :NEW.ID_TEMPS FROM DUAL;
END;
/

-- Créer une séquence pour la table GEOGRAPHIE
CREATE SEQUENCE SEQ_GEOGRAPHIE;

-- Créer un déclencheur pour la séquence de la table GEOGRAPHIE
CREATE OR REPLACE TRIGGER TRIG_SEQ_GEOGRAPHIE
BEFORE INSERT ON GEOGRAPHIE FOR EACH ROW
BEGIN
    SELECT SEQ_GEOGRAPHIE.NEXTVAL INTO :NEW.ID_GEOGRAPHIE FROM DUAL;
END;
/



